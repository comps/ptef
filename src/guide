

- TODO: try running ptef-report and ptef-mklog without any args
   - verify they show help msg without segfault
   - they should exit with non-zero
- TODO: try running them with -h; they should exit with zero

- add python api documentation as """ for all functions

- resolve CFLAGS="-fanalyzer -O0 -g" warnings

- examples/ dir - requires ptef installed on the system
  - simple symlinks example
    - simple 'run' symlinks + trivial standalone tests
    - shared test lib in utils/ sourced by bash tests
      - ie. function for checking service status
  - custom mini wrapper in utils/ symlinked in other dirs that would
    run all tests via 'time', measuring their time, logging it to some
    single file along with test name; see also bash TIMEFORMAT
  - more complex example with one executable checking multiple services
    and reporting each via ptef_report
  - add an example under examples/ showing off how to 'find .' a custom list
    of executables and pass it via xargs to ptef-runner
    - use 'xargs -a $tmpfile' to preserve stdin
    - sort it alphabetically, but in reverse, to show the posibilities,
      also include hidden executables, also skip some exec name
  - post-processing results via PTEF_RESULTS_FD pipe + waiving tool
    - custom color map in the waiving tool
  - subshell spawned as background job using ptef_report MARK $(date)

----

- look for EINTR of every syscall used, make an INTR-safe wrapper
  for each one of them
  - alarm can interrupt anywhere
  - incl. waitpid in runner

- clean up includes

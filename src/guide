- document thread-safety for all 3 API functions

- TODO: remove PTEF_IGNORE_FILES, turn it into runner -i arg
  - only for the current level
  - change ptef_runner() arg to be char **ignore, NULL-terminated
    - do newline-to-char** conversion in the CLI ptef-runner.c
    - have native list [] interface in ptef.py
    - don't care about bash, it uses CLI runner
  - add an example under examples/ showing off how to 'find .' a custom list
    of executables and pass it via xargs to ptef-runner
    - use 'xargs -a $tmpfile' to preserve stdin
    - sort it alphabetically, but in reverse, to show the posibilities,
      also include hidden executables, also skip some exec name

- TODO: try running ptef-report and ptef-mklog without any args
   - verify they show help msg without segfault
   - they should exit with non-zero
- TODO: try running them with -h; they should exit with zero

- add example showing how to post-process results
  - see ospp-kickstart-test-suite

- fix MARK result locking
  - F_GETLK
  - if we do have a lock --> do ptef_report with PTEF_NOLOCK
  - if we don't have a lock --> do ptef_report normally
    - this will also wait for somebody else if they manage to lock
      it faster than us and/or are already holding the lock

- compile with -O2, ship debuginfo separately

----

- look for EINTR of every syscall used, make an INTR-safe wrapper
  for each one of them
  - alarm can interrupt anywhere
  - incl. waitpid in runner

- clean up includes

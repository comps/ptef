- warn that readdir(3) is used, which is generally thread-safe,
  but this is not guaranteed by POSIX.1
  - also document thread-safety for all 3 API functions
  - ie. runner is *not* thread safe with itself, but it should be safe to use in a bigger
    threaded program, though note:
    - writes to stdout, locked by F_WRLCK
      - is per-process, not per-fd; the runner will unlock any locks on stdout
        and on PTEF_RESULTS_FD
      - other threads MUST NOT lock stdout/PTEF_RESULTS_FD
    - writes to stderr on error, unsafely (not locked)
    - managers forks with PID tracking and will report as error (on stderr)
      any collected children that aren't its own, so DO NOT start any background
      forks that may exit before the runner call finishes
      - thus also do not start more than one instance of the runner in
        a single process
      - the limitation is waitpid() unable to wait for an array of pids
  - regular MARK printout is done via periodic SIGALRM, not using
    POSIX timers (as they require linking libpthread + librt)
    - make sure SIGALRM is blocked using sigprocmask(2) or pthread_sigmask(3)
      in all threads other than the one executing ptef_runner

- TODO: remove PTEF_IGNORE_FILES, turn it into runner -i arg
  - only for the current level
  - change ptef_runner() arg to be char **ignore, NULL-terminated
    - do newline-to-char** conversion in the CLI ptef-runner.c
    - have native list [] interface in ptef.py
    - don't care about bash, it uses CLI runner
  - add an example under examples/ showing off how to 'find .' a custom list
    of executables and pass it via xargs to ptef-runner
    - use 'xargs -a $tmpfile' to preserve stdin
    - sort it alphabetically, but in reverse, to show the posibilities,
      also include hidden executables, also skip some exec name

- TODO: PTEF_NOROTATE flag to mklog
  - and getopt to cli and bash ptef-mklog
  - and flag in ptef.py
  - and some test(s)

- TODO: test for -- arg first occurence

- add example showing how to post-process results
  - see ospp-kickstart-test-suite

----

- look for EINTR of every syscall used, make an INTR-safe wrapper
  for each one of them
  - alarm can interrupt anywhere
  - incl. waitpid in runner

- clean up includes

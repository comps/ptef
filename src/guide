
- log creation
  - rotation
  - TEF_LOGS

- MARK result
  - done using alarm(2)
  - make sure any other code is interrupt-safe (ie. waitpid) and re-tries what it was doing
    if interrupted by a signal




- warn that readdir(3) is used, which is generally thread-safe,
  but this is not guaranteed by POSIX.1
  - also document thread-safety for all 3 API functions
  - ie. runner is *not* thread safe with itself, but it should be safe to use in a bigger
    threaded program, though note:
    - writes to stdout, locked by F_WRLCK
    - writes to stderr on error, unsafely (not locked)
    - manages forks without PID tracking, so DO NOT start any background
      forks that may exit before the runner call finishes
      - thus also do not start more than one instance of the runner in
        a single process
      - the limitation is waitpid() unable to wait for an array of pids

- look for EINTR of every syscall used, make an INTR-safe wrapper
  for each one of them
  - alarm can interrupt anywhere
  - incl. waitpid in runner

- pipe support for tef_mklog (?)
  - instead of creating logfile to be used by runner that called tef_mklog,
    provide writing to log automatically
  - could abstract TEF_DEBUG_OUTPUT functionality so runner doesn't have to care

- bash builtin - try getenv on BASH_ARGV0 to avoid '-a $(basename $0)'
  - bash 5.0 .. :/

- write reasonable perror messages, prefix with 'tef: ', etc.

- optimize with -O2 and add LTO

- clean up includes

- check fox max CLI length, split arguments across runner calls,
  OR document that this is missing
  - add this to TEF.md
  - ACTUALLY this should never happen; we only pass args if parent (user)
    gave us args and, in that case, all our args already must fit within
    the limit, even if we don't merge

- adjust TEF.md to say that invalid (insane) arg must stop arg merging and the
  runner with exit with non-0 without running anything beyond the invalid arg
  **or running anything beyond the bad arg**
  - this greatly simplifies merging algo
  - what about missing executables? .. permission denied?
    - should a runner continue (skip bad) or abort completely ?
  --> leave as-is, skip insane args, make them abort merging, don't exit

  --> document/clarify that runner should, in all cases, skip the failing
      executable, treat it as an error (finish with non-0 in the end),
      and continue on

- adjust TEF.md w.r.t. terminal detection
  - don't check terminal colors, it's really nonstandard
  - simply: if terminal, assume it supports >=16 colors, else no colors

- re-do fd0 handling in TEF.md
  - use stdout instead of fd 0, rely on executables not being too noisy,
    maybe mention that this stdout result reporting may be unrealiable
    for machine parsing (due to possibly noisy execs)
  - leave TEF_RESULTS_FD as-is, color-less, for reliable reporting
  - when executing, redirect only stderr to log, leave stdout on console
  - TODO fix 'LOOP_FD' hacks in ospp-kickstart-test-suite

- add to TEF.md a section mentioning RFC2119 (must, should, etc. language)
  - Background & Rationale
  - The Core Idea
    - any executable can be a runner
  - Argument-less and argument-given run
    - path specification, examples, path merging
  - ...
  - Big "examples.md" document
    - passing parameters to executable via a trailing /something
    - one executable reporting multiple results
    - virtual hierarchies, LTP, ...
    - writing custom runners using the building blocks
      - ie. runners that always skip 'setup' 'run' 'cleanup' minus their own
        argv0

- note for parallel execution - what about argument merging?
  - should 'a/b a/c' run a twice wi 'b' and 'c' ?
  - should merging be always disabled for parallel exec?
  - should a new parallel job start only if the currently-examined
    executable is != from the already running?
    - would limit each exec to only one instance
  - can we combine them?
    - if merging is disabled, run multiple jobs even for the same exec
    - if merging is enabled, run one job with multiple args for the one exec

- redo bools as integers
  - probably better for ABI
  - also return -1 on error

- rewrite realloc_safe to take void **ptr to be modified in-place
  - return either the new ptr on success, or NULL on fail
  - caller can then choose to free the passed ptr on fail
    or continue on without new element added

- include guards (for multiple-inclusion) in tef.h

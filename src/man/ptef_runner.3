.\" syntax documented on (search on page):
.\" https://www.gnu.org/software/groff/manual/groff.html
.TH PTEF_RUNNER 3

.SH NAME
ptef_runner \- implements a runner as described by the PTEF spec

.SH SYNOPSIS
.nf
.B  #include <ptef.h>
.PP
.BI "int ptef_runner(int " argc ", char **" argv ", int " jobs ", char **" ignored ,
.BI "                int " flags );
.PP
.BR "extern char *(*" ptef_status_colors ")[2];"
.PP
.BR "extern char **" ptef_exit_statuses ;
.BR "extern char *" ptef_exit_statuses_default ;
.fi
.PP
Link with \fI\-lptef\fP.

.SH DESCRIPTION
.BR ptef_runner ()
is the API of a reference Portable Test Execution Framework (PTEF) "runner"
implementation.
.PP
It takes arguments via
.I argc
and 
.I argv
as they would be passed on a command line to a
.BR main (),
including argv[0] indicating the path used to start up the program, used for
.BR basename (argv[0])
detection, as outlined in the PTEF specification. Unlike a traditional
.BR main (),
.I argv
may be, but does not need to be NULL-terminated.
.PP
.I jobs
set to anything above 1 will make the runner execute files in parallel, with
a maximum parallel processes equal to the
.I jobs
value. Set to 0 or 1 to run sequentially.
.PP
.I ignored
is a NULL-terminated array of file/directory names to ignore when running
without arguments and searching the current working directory for executables.
It has no effect when running with arguments (when
.I argc
is >1).
.PP
.I flags
provide a way to further parametrize the runner execution:
.TP
.BR PTEF_NOMERGE
Disable argument merging. See the PTEF specification for details.
.PP
The
.I ptef_status_colors
variable points to a default set of colors to be used for PTEF result line
statuses. Override the color set by making
.I ptef_status_colors
point to your own char *colors[][2] array, where the first column is status
to be matched on, and the second column is the status it should be rewritten
to (may include ASCII color codes, spaces for alignment, etc.).
The array must be terminated with
.I NULL
in both columns on the same row. For example:
.PP
.in +4n
.EX
char *ptef_status_colors[][2] = {
    { "PASS", "\\e[1;32mPASS\\e[0m " },
    { "FAIL", "\\e[1;31mFAIL\\e[0m " },
    { NULL }
};
.EE
.in
.PP
.I ptef_exit_statuses
allow you to override a PTEF standard behavior of reporting PASS on 0 exit code
and FAIL on non-0 exit code by supplying your own char *array[256] specifying
statuses as strings, indexed by an exit code. A NULL in place of a string tells
the runner to use a default status.
.I ptef_exit_statuses_default
then specifies this default. As an example, this is the preset array,
conforming to the PTEF standard:
.PP
.in +4n
.EX
char *ptef_exit_statuses[256] = {
    [0] = "PASS",
};
char *ptef_exit_statuses_default = "FAIL";
.EE
.in

.SH RETURN VALUE
On success,
.BR ptef_runner ()
returns 0. On failure, \-1 is returned, and
.I errno
is set to indicate the error.
.PP
Additionally,
.BR ptef_runner ()
writes details about the failure to standard error output.

.SH NOTES
.BR ptef_runner ()
is not meant to be used inside generic programs due to how heavily it relies
on the overall program state and its access to stdout and stderr. It's intended
use is in simple wrappers that perform some setup/cleanup around the actual
runner logic.
.PP
Further, it is not thread-safe, mainly due to:
.IP \[bu] 2
locking via POSIX advisory locks, which are per-process, so another thread
could cause an unlock
.RS
.IP \[bu] 2
(both on stdout and PTEF_RESULTS_FD)
.RE
.IP \[bu]
writes to stderr (on error) not being guarded by a lock
.IP \[bu]
creating children via
.BR fork (2)
and waiting for them via
.BR waitpid (2)
\- while the runner keeps track of which PIDs were created by itself and is able
to skip foreign PIDs, it has no control over which one it gets from the kernel
via
.BR waitpid (2)
so it may accidentally consume a child created by another thread
.IP \[bu]
the use of
.BR strerror (3)
which is not thread-safe as it may use a global table of error descriptions,
which may be altered during runtime by another thread changing locale
.IP \[bu]
the use of
.BR readdir (3)
which is generally thread-safe, but this is not guaranteed by POSIX

.SH SEE ALSO
.ad l
.nh
.BR ptef_report (3),
.BR ptef_mklog (3)

.SH COLOPHON
This page is part of the PTEF project, see
\%https://github.com/comps/ptef/

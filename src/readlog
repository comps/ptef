#!/bin/bash
#
# Copyright (C) 2018  Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#set -x

err() {
    echo "error: $1" >&2
    exit 1
}
warn() {
    echo "warn: $1" >&2
}

declare -A results

print_status() {
    local tst="/${1#./}" res="$2"
    if [ "$TERM" -a "$(tput colors)" -ge 8 ]; then
        case "$res" in
            PASS) echo -ne "\033[1;32m${res}\033[0m" ;;
            FAIL) echo -ne "\033[1;31m${res}\033[0m" ;;
            RUN) echo -ne "\033[1;34m${res} \033[0m" ;;
            *) echo -n "$res" ;;
        esac
        echo " $tst"
    else
        echo "$res $tst"
    fi
}

process_one() {
    local tst="$1" res="$2"
    shift 2

    case "$1" in
        final) results["$tst"]="$res" ;;
        only)  [ "$res" = "$2" ] && results["$tst"]="$res" ;;
        not)   [ "$res" != "$2" ] && results["$tst"]="$res" ;;
        all|*) print_status "$tst" "$res" ;;
    esac
}

check_version() {
    local fd="$1" version=
    IFS= read -u "$fd" -r -d '' version
    [ "$version" = "2" ]
}

while IFS= read -r -d '' filename; do
    exec {fd}<"$filename"

    # len 'tefresults\0' = 11, bash variables ignore \0, so 10 is stored
    read -u "$fd" -n 11 -r -d '' header
    [ "$header" = "tefresults" ] || { exec {fd}>&-; continue; }
    check_version "$fd" || { exec {fd}>&-; continue; }

    #echo "found metafile: $filename"

    # TODO: doesn't support tests or paths with /logs/ in name;
    # needed because we search through /some/path/logs/* instead of /some/path/*
    # and we need to prepend /some/path/ to the test names
    path_base="${filename/\/logs\//\/}"

    while IFS= read -u "$fd" -r -d '' block; do
        # check for repeated headers
        if [ "$block" = "tefresults" ]; then
            check_version "$fd" && continue || break
        fi

        read -r status test <<<"$block"
        process_one "$path_base/$test" "$status" "$@"
    done
    exec {fd}>&-
done < <(find . -type f -size +11c -print0 | sort -z)

case "$1" in
    final|only|not)
        if [ "${#results[@]}" -gt 0 ]; then
            while IFS= read -r -d '' key; do
                print_status "$key" "${results[$key]}"
            done < <(printf '%s\0' "${!results[@]}" | sort -z)
        fi
        ;;
esac

# vim: sts=4 sw=4 et :

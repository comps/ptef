#!/bin/bash
#
# changing mode/owner of files in /proc should be impossible
# for unprivileged user (ignoring capabilities)
#
# this demonstrates the use of virtual hierarchies (mode/owner) ignoring
# the filesystem layout - useful for running 3rd party suites with nested
# tests via a single runner executable
#
# also, this runner is breaking the spec by ignoring arguments
#

[ "$(whoami)" = "root" ] && exit 0

#file_list="/proc/kcore /proc/sys/vm/* /proc/sys/kernel/* /proc/sys/fs/*"
file_list="/proc/sys/vm/*"

get_perms() {
	stat -c '%a' "$1"
}
get_owner() {
	stat -c '%U:%G' "$1"
}
gen_testname() {
	sed 's%^/%%;s%/%_%g' <<<"$1"
}

ORIG_PREFIX="$TEF_PREFIX"

# file mode
tef-report RUN "mode"
#tef-mklog "mode" >/dev/null
TEF_PREFIX="$TEF_PREFIX/mode"
for f in $file_list; do
	tname=$(gen_testname "$f")
	tef-report RUN "$tname"
	log=$(tef-mklog "$tname")

	{
		{ set -x; } 2>/dev/null
		before=$(get_perms "$f")
		chmod 777 "$f"
		after=$(get_perms "$f")
		{ set +x; } 2>/dev/null
	} &> "$log"

	[ "$before" = "$after" ] && \
		tef-report PASS "$tname" || tef-report FAIL "$tname"
done
TEF_PREFIX="$ORIG_PREFIX"
tef-report PASS "mode"

# owner
tef-report RUN "owner"
#tef-mklog "owner" >/dev/null
TEF_PREFIX="$TEF_PREFIX/owner"
for f in $file_list; do
	tname=$(gen_testname "$f")
	tef-report RUN "$tname"
	log=$(tef-mklog "$tname")

	{
		{ set -x; } 2>/dev/null
		before=$(get_owner "$f")
		chown nobody:nobody "$f"
		after=$(get_owner "$f")
		{ set +x; } 2>/dev/null
	} &> "$log"

	[ "$before" = "$after" ] && \
		tef-report PASS "$tname" || tef-report FAIL "$tname"
done
TEF_PREFIX="$ORIG_PREFIX"
tef-report PASS "owner"

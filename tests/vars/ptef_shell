#!/bin/bash
# Test that PTEF_SHELL makes the runner launch shell and do nothing more
# (Run ptef-runner via timeout, in case it actually spawns interactive shell.)

. testlib.bash

# run with arguments shoud ignore PTEF_SHELL
mkfile > executable
chmod +x executable
PTEF_SHELL="/bin/echo" timeout 10 ptef-runner executable \
	>"$tmpdir/runner_out" 2>"$tmpdir/runner_err"
assert_contents $'PASS[\t ]*/executable\n' "$tmpdir/runner_out"
assert_contents '' "$tmpdir/runner_err"

# set to a specific value = run that executable
PTEF_SHELL="/bin/echo" timeout 10 ptef-runner \
	>"$tmpdir/runner_out" 2>"$tmpdir/runner_err"
assert_contents $'\n' "$tmpdir/runner_out"
assert_contents '' "$tmpdir/runner_err"

# try with relative path
cat > "$tmpdir/testshell" <<-EOF
#!/bin/bash
echo "works"
EOF
chmod +x "$tmpdir/testshell"
relpath=$(realpath --relative-to=. "$tmpdir/testshell")
PTEF_SHELL="$relpath" timeout 10 ptef-runner \
	>"$tmpdir/runner_out" 2>"$tmpdir/runner_err"
assert_contents $'works\n' "$tmpdir/runner_out"
assert_contents '' "$tmpdir/runner_err"

# try non-zero exit code
ret=0
echo "exit 10" >> "$tmpdir/testshell"
PTEF_SHELL="$relpath" timeout 10 ptef-runner \
	>"$tmpdir/runner_out" 2>"$tmpdir/runner_err" || ret=$?
assert_contents $'works\n' "$tmpdir/runner_out"
assert_contents '' "$tmpdir/runner_err"
[ "$ret" -eq 10 ]

# check for $SHELL fallback
PTEF_SHELL=1 SHELL="/bin/echo" timeout 10 ptef-runner \
	>"$tmpdir/runner_out" 2>"$tmpdir/runner_err"
assert_contents $'\n' "$tmpdir/runner_out"
assert_contents '' "$tmpdir/runner_err"

# make sure PTEF_SHELL is unset in the shell
# (env to catch set-but-empty variable)
cat > "$tmpdir/testshell" <<-EOF
#!/bin/bash
env | grep PTEF_SHELL || true
EOF
chmod +x "$tmpdir/testshell"
PTEF_SHELL="$tmpdir/testshell" timeout 10 ptef-runner \
	>"$tmpdir/runner_out" 2>"$tmpdir/runner_err"
assert_contents '' "$tmpdir/runner_out"
assert_contents '' "$tmpdir/runner_err"

#!/bin/bash

. testlib.sh

function mkfile {
	make_arg_printer "$@"
}
function mk2execs {
	mkfile > exec1
	mkfile > exec2
	chmod +x exec1 exec2
}
function mk3execs {
	mkfile > exec1
	mkfile > exec2
	mkfile > exec3
	chmod +x exec1 exec2 exec3
}


# Test that the runner runs all executables in CWD when no args are given
function no_args {
	mk2execs
	assert_ptef_runner "$@" > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec2$' "$tmpdir/runner_out"
}

# Test that the runenr executes only the executable specified as arg
function one_arg {
	mk2execs
	assert_ptef_runner "$@" exec1 > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	assert_nogrep '/exec2' "$tmpdir/runner_out"
	assert_ptef_runner "$@" exec2 > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec2$' "$tmpdir/runner_out"
	assert_nogrep '/exec1' "$tmpdir/runner_out"
}

# Test that the runner can deal with arguments containing whitespace
function one_arg_with_spaces {
	mk2execs
	mv exec1 "ex ec1"
	assert_ptef_runner "$@" "ex ec1" > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/ex ec1$' "$tmpdir/runner_out"
	assert_nogrep '/exec2' "$tmpdir/runner_out"
	assert_nogrep '/ex$' "$tmpdir/runner_out"
	assert_nogrep '/ec1' "$tmpdir/runner_out"
}

# Test that the runner can process more than one argument
function multiple_args {
	mk3execs
	assert_ptef_runner "$@" exec1 exec2 > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec2$' "$tmpdir/runner_out"
	assert_nogrep '/exec3' "$tmpdir/runner_out"
	assert_ptef_runner "$@" exec1 exec3 > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec3$' "$tmpdir/runner_out"
	assert_nogrep '/exec2' "$tmpdir/runner_out"
}

# Test that no executables are run when an empty zero-length argument is given
# (runner does not default to arg-less run)
function zero_length_arg {
	mk2execs
	assert_ptef_runner "$@" '' > "$tmpdir/runner_out"
	assert_nogrep "$@" '' "$tmpdir/runner_out"
	assert_ptef_runner "$@" '' '' > "$tmpdir/runner_out"
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test that zero-length arg is skipped amongst other arguments
function zero_length_arg_skip {
	mk2execs
	assert_ptef_runner "$@" exec1 '' exec2 > "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec2$' "$tmpdir/runner_out"
}

# Test that the runner throws an error on a spec-defined invalid argument
# and ignores it
function invalid_arg {
	local ret=0
	mk2execs
	ptef-runner "$@" '.' >"$tmpdir/runner_out" 2>"$tmpdir/runner_err" || ret=$?
	assert_grep 'arg failed sanity check: \.$' "$tmpdir/runner_err"
	assert_nogrep '' "$tmpdir/runner_out"
	[ "$ret" -ne 0 ]
	ptef-runner "$@" '..' >"$tmpdir/runner_out" 2>"$tmpdir/runner_err" || ret=$?
	assert_grep 'arg failed sanity check: \.\.$' "$tmpdir/runner_err"
	assert_nogrep '' "$tmpdir/runner_out"
	[ "$ret" -ne 0 ]
}

# Test that the runner aborts on invalid argument and executes no further args
function invalid_arg_skip {
	local ret=0
	mk2execs
	ptef-runner "$@" exec1 '.' exec2 >"$tmpdir/runner_out" 2>"$tmpdir/runner_err" || ret=$?
	assert_grep 'arg failed sanity check' "$tmpdir/runner_err"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	assert_nogrep '^PASS[[:space:]]\+/exec2$' "$tmpdir/runner_out"
	[ "$ret" -ne 0 ]
}

# Test that the first occurence of '--' is skipped
function double_dash_skip {
	mkfile 1 > '--'
	mkfile 2 > exec1
	chmod +x -- -- exec1
	assert_ptef_runner "$@" -- exec1 > "$tmpdir/runner_out"
	assert_nogrep '^PASS[[:space:]]\+/--$' "$tmpdir/runner_out"
	assert_grep '^PASS[[:space:]]\+/exec1$' "$tmpdir/runner_out"
	[ ! -f exec_log.1 ]
	[ -f exec_log.2 ]
}

# Test that error is printed to stderr when trying to run a non-executable file
# given as argument
# (The error is from execve() which comes late in the process)
function nonexecutable {
	local ret=0
	mkfile > nonexec
	ptef-runner "$@" nonexec >"$tmpdir/runner_out" 2>"$tmpdir/runner_err" || ret=$?
	# platforms without O_CLOEXEC should have it inside logs/
	assert_grep 'ptef error .* Permission denied' "$tmpdir/runner_err" || \
		assert_grep 'ptef error .* Permission denied' logs/nonexec.log
	# since the fail happens after fork(), it should emit a FAIL result
	assert_grep '^FAIL[[:space:]]\+/nonexec$' "$tmpdir/runner_out"
	# .. and it as a parent should exit successfully
	[ "$ret" -eq 0 ]
}

+ no_args
+ one_arg
+ one_arg_with_spaces
+ multiple_args
+ zero_length_arg
+ zero_length_arg_skip
+ invalid_arg
+ invalid_arg_skip
+ double_dash_skip
+ nonexecutable


# run all tests also with argument merging disabled
function no_args_nomerge { no_args -m "$@"; }
function one_arg_nomerge { one_arg -m "$@"; }
function one_arg_with_spaces_nomerge { one_arg_with_spaces -m "$@"; }
function multiple_args_nomerge { multiple_args -m "$@"; }
function zero_length_arg_nomerge { zero_length_arg -m "$@"; }
function zero_length_arg_skip_nomerge { zero_length_arg_skip -m "$@"; }
function invalid_arg_nomerge { invalid_arg -m "$@"; }
function invalid_arg_skip_nomerge { invalid_arg_skip -m "$@"; }
function double_dash_skip_nomerge { double_dash_skip -m "$@"; }
function nonexecutable_nomerge { nonexecutable -m "$@"; }

+ no_args_nomerge
+ one_arg_nomerge
+ one_arg_with_spaces_nomerge
+ multiple_args_nomerge
+ zero_length_arg_nomerge
+ zero_length_arg_skip_nomerge
+ invalid_arg_nomerge
+ invalid_arg_skip_nomerge
+ double_dash_skip_nomerge
+ nonexecutable_nomerge


# Test that argument merging works as expected
function merged_args {
	mkfile 1 > exec1
	mkfile 2 > exec2
	chmod +x exec1 exec2
	assert_ptef_runner "$@" exec1/arg1 exec1/arg2 > "$tmpdir/runner_out"
	assert_grep '^argc: 2$' exec_log.1
	assert_grep '^argv: arg1 arg2$' exec_log.1
	assert_ptef_runner "$@" exec1/arg1 exec1/arg2 exec2 > "$tmpdir/runner_out"
	assert_grep '^argv: arg1 arg2$' exec_log.1
	assert_grep '^argc: 0$' exec_log.2
	assert_ptef_runner "$@" exec1/arg1 '' exec1/arg2 > "$tmpdir/runner_out"
	assert_grep '^argc: 1$' exec_log.1
	assert_grep '^argv: arg2$' exec_log.1  # last execution overrides the log
	# TODO: run with exec1 (no slash) two times, to make sure it is run twice
	#       and no merging occurs
}
function nonmerged_args {
	mkfile 1 > exec1
	mkfile 2 > exec2
	chmod +x exec1 exec2
	assert_ptef_runner "$@" -m exec1/arg1 exec1/arg2 > "$tmpdir/runner_out"
	assert_grep '^argc: 1$' exec_log.1
	assert_grep '^argv: arg2$' exec_log.1  # last execution
}

+ merged_args
+ nonmerged_args


run_tests "$@"

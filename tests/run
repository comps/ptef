#!/bin/bash
set -e
argv0=$(basename "$0")

failed=
err() { echo >&2; echo "ERROR: $@" >&2; echo >&2; failed=1; }

export PATH="$PWD/bin:$PATH"
export LD_LIBRARY_PATH="$PWD/bin"

export TEST_VALGRIND_BINDIR="$PWD/bin/valgrind"
exec {TEST_VALGRIND_FD}>valgrind.log
export TEST_VALGRIND_FD

exec {TEST_STDOUT_LOG}>stdout.log

# make the hierarchy traversal logic independent on ptef,
# to make sure the traversal itself can be tested as a feature
# in a respective test

set -o pipefail
for variant in cli valgrind; do  # TODO: bash python
	ttee -d "$TEST_STDOUT_LOG" -- echo -e "\n::: $variant :::\n"
	for binary in ptef-runner ptef-report ptef-mklog libptef.so; do
		ln -sf "$variant/$binary" "bin/$binary"
	done
	for dir in *; do
		if [ -x "$dir/$argv0" ]; then
			pushd "$dir" >/dev/null
			TEST_SUBDIR="$dir" \
				ttee -d "$TEST_STDOUT_LOG" -- "./$argv0"
			popd >/dev/null
		fi
		# TODO: compare logged stdout to some template
	done
done

exec {TEST_VALGRIND_FD}>&-
exec {TEST_STDOUT_LOG}>&-

if grep -q 'ERROR SUMMARY: [1-9] errors' valgrind.log; then
	err "found errors in valgrind.log"
fi

[ -z "$failed" ] && exit 0 || exit 1

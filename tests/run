#!/bin/bash
argv0=$(basename "$0")

# this top-level 'run' adds one more abstract hierarchy level
# at the top, here called a "variant", ie. 'cli', 'valgrind', etc.,
# symlinking the appropriate binaries/libraries/scripts for each
# before running ptef-runner on the real hierarchy

# eat up option args, pass them later to ptef-runner
opts=()
while [ "$#" -gt 0 ]; do
	[ "${1::1}" = "-" ] || break
	opts+=("$1")
	shift
done

failed=
function err { echo -e "\nERROR: $@\n" >&2; failed=1; }

TESTLIB_NOOP=1 . testlib.bash

function run_arg {
	local testpath="$1" binary=

	local variant= test=
	IFS=/ read -r variant test <<<"${testpath#/}"

	set-variant "$variant" || return 1

	if [ -n "$test" ]; then
		test=("$test")
	else
		test=()
	fi

	if [ "$variant" = "valgrind" ]; then
		exec {TEST_VALGRIND_FD}>valgrind.log
		export TEST_VALGRIND_FD
	fi

	[ -n "$PTEF_RUN" ] && ptef-report RUN "$variant"
	PTEF_PREFIX="/$variant" PTEF_LOGS="$PWD/logs" \
		ptef-runner -a "$argv0" "${opts[@]}" "${test[@]}"
	rc=$?
	if [ "$rc" -eq 0 ]; then
		ptef-report PASS "$variant"
	else
		ptef-report FAIL "$variant"
	fi
	if [ -n "$TEST_VALGRIND_FD" ]; then
		exec {TEST_VALGRIND_FD}>&-
		unset TEST_VALGRIND_FD
	fi

	return "$rc"
}

if [ "$#" -gt 0 ]; then
	variants=("$@")
else
	variants=(${TEST_VARIANTS:-/cli /valgrind /bash /python})
fi

rm -f valgrind.log

exec {results_fd}>"results.log"
for testpath in "${variants[@]}"; do
	PTEF_RESULTS_FD="$results_fd" run_arg "$testpath"
done
exec {results_fd}>&-

if grep -q '^FAIL[[:space:]]\+/' results.log; then
	err "some tests failed"
	grep '^FAIL[[:space:]]\+/' results.log >&2

	if [ -n "$TEST_PRINT_LOGS" ]; then
		echo -e "\nlogs of failed tests:" >&2
		pushd logs >/dev/null
		while read -r testname; do
			[ -f "$testname.log" ] && grep -H . "$testname.log" >&2
		done < <(sed 's%^FAIL[[:space:]]\+/%%p' < ../results.log)
		popd >/dev/null
	fi
fi

if [ -f valgrind.log ] && grep -q 'ERROR SUMMARY: [1-9] errors' valgrind.log; then
	err "found errors in valgrind.log"
	if [ -n "$TEST_PRINT_LOGS" ]; then
		echo -e "\nvalgrind.log:" >&2
		cat valgrind.log >&2
	fi
fi

[ -z "$failed" ] && exit 0 || exit 1

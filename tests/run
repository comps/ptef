#!/bin/bash
argv0=$(basename "$0")

# this top-level 'run' adds one more abstract hierarchy level
# at the top, here called a "variant", ie. 'cli', 'valgrind', etc.,
# symlinking the appropriate binaries/libraries/scripts for each
# before running ptef-runner on the real hierarchy

# eat up option args, pass them later to ptef-runner
opts=()
while [ "$#" -gt 0 ]; do
	[ "${1::1}" = "-" ] || break
	opts+=("$1")
	shift
done

failed=
function err { echo -e "\nERROR: $@\n" >&2; failed=1; }

export PATH="$PWD/bin:$PATH"
export LD_LIBRARY_PATH="$PWD/bin"
export TEST_BINDIR="$PWD/bin"

function run_arg {
	local testpath="${1#/}" binary=

	local variant= test=
	IFS=/ read -r variant test <<<"$testpath"

	for binary in ptef-runner ptef-report ptef-mklog libptef.so.0.0; do
		if [ ! -x "bin/$variant/$binary" ]; then
			err "broken variant $variant"
			return 1
		fi
		ln -sf "$variant/$binary" "bin/$binary" || return 1
	done

	export TEST_VARIANT="$variant"

	if [ -n "$test" ]; then
		test=("$test")
	else
		test=()
	fi

	if [ "$variant" = "valgrind" ]; then
		exec {TEST_VALGRIND_FD}>valgrind.log
		export TEST_VALGRIND_FD
	fi

	[ -n "$PTEF_RUN" ] && ptef-report RUN "$variant"
	PTEF_PREFIX="/$variant" PTEF_LOGS="$PWD/logs" \
		ptef-runner -a "$argv0" "${opts[@]}" "${test[@]}"
	rc=$?
	if [ "$rc" -eq 0 ]; then
		ptef-report PASS "$variant"
	else
		ptef-report FAIL "$variant"
	fi
	if [ -n "$TEST_VALGRIND_FD" ]; then
		exec {TEST_VALGRIND_FD}>&-
		unset TEST_VALGRIND_FD
	fi

	return "$rc"
}

if [ "$#" -gt 0 ]; then
	variants=("$@")
else
	variants=(/cli /valgrind /bash /python)
fi

rm -f valgrind.log

exec {results_fd}>results-current.log
for variant in "${variants[@]}"; do
	PTEF_RESULTS_FD="$results_fd" run_arg "$variant"
done
exec {results_fd}>&-

# when running a full test set (without args),
# compare generated results to a known-good reference
if [ "$#" -eq 0 -a -f results-reference.log ]; then
	sed '/^RUN[[:space:]]/d' results-current.log | \
		sort -r > results-tmp.log
	mv results-tmp.log results-current.log

	if ! cmp -s results-current.log results-reference.log; then
		err "results-current differs from reference"
		diff --color=auto -u results-reference.log results-current.log
	fi
fi

if [ -f valgrind.log ] && grep -q 'ERROR SUMMARY: [1-9] errors' valgrind.log; then
	err "found errors in valgrind.log"
fi

[ -z "$failed" ] && exit 0 || exit 1

#!/bin/bash

. testlib.sh


# PTEF_* flags for ptef_report are abstracted as CLI options by wrappers
# in bin/, so we can treat all variants as CLI

# also, PTEF_COLOR for ptef_report is tested in 'vars'


# Test that ptef_report locks stdout when writing a result to it
function locking_stdout {
	touch "$tmpdir/report_out"
	mkfifo "$tmpdir/lockfifo"
	hold-lock "$tmpdir/lockfifo" >"$tmpdir/report_out" &
	# wait for hold-lock to lock report_out
	cat "$tmpdir/lockfifo"
	timeout 1 assert_ptef_report PASS testname \
		>"$tmpdir/report_out" || true
	# make hold-lock finish
	cat "$tmpdir/lockfifo"
	wait
	# ptef-report should have timed out
	assert_contents '' "$tmpdir/report_out"
}

# Test that ptef_report locks PTEF_RESULTS_FD descriptor when writing a result
# to it, independently of stdout
function locking_results_fd {
	touch "$tmpdir/results_fd_out"
	local fd=
	exec {fd}>"$tmpdir/results_fd_out"
	mkfifo "$tmpdir/lockfifo"
	hold-lock "$tmpdir/lockfifo" >&"$fd" &
	# wait for hold-lock to lock report_out
	cat "$tmpdir/lockfifo"
	PTEF_RESULTS_FD="$fd" TEST_WRAPPER="timeout 1" \
		assert_ptef_report PASS testname >"$tmpdir/report_out" || true
	# make hold-lock finish
	cat "$tmpdir/lockfifo"
	wait
	# ptef-report should have timed out
	assert_contents '' "$tmpdir/results_fd_out"
	assert_contents '' "$tmpdir/report_out"
}

# Test that ptef_report exits with 2 (EAGAIN) when an output is locked
# and PTEF_NOWAIT is passed
function locking_nowait {
	touch "$tmpdir/results_fd_out"
	local fd=
	exec {fd}>"$tmpdir/results_fd_out"
	mkfifo "$tmpdir/lockfifo"
	hold-lock "$tmpdir/lockfifo" >&"$fd" &
	# wait for hold-lock to lock report_out
	cat "$tmpdir/lockfifo"
	PTEF_RESULTS_FD="$fd" timeout 1 ptef-report -n PASS testname \
		>"$tmpdir/report_out" 2>"$tmpdir/report_err" \
			|| echo $? >"$tmpdir/report_exitval"
	# make hold-lock finish
	cat "$tmpdir/lockfifo"
	wait
	assert_contents '' "$tmpdir/report_err"
	# ptef-report should have exited without writing out results
	assert_contents '' "$tmpdir/results_fd_out"
	assert_contents '' "$tmpdir/report_out"
	assert_contents $'2\n' "$tmpdir/report_exitval"
}

# Test that ptef_report ignores any locking when PTEF_NOLOCK is passed
function locking_nolock {
	touch "$tmpdir/results_fd_out"
	local fd=
	exec {fd}>"$tmpdir/results_fd_out"
	mkfifo "$tmpdir/lockfifo"
	hold-lock "$tmpdir/lockfifo" >&"$fd" &
	# wait for hold-lock to lock report_out
	cat "$tmpdir/lockfifo"
	PTEF_RESULTS_FD="$fd" TEST_WRAPPER="timeout 1" \
		assert_ptef_report -N PASS testname >"$tmpdir/report_out" || true
	# make hold-lock finish
	cat "$tmpdir/lockfifo"
	wait
	# ptef-report should have reported to both outputs, ignoring lock
	assert_contents $'PASS[\t ]*/testname\n' "$tmpdir/results_fd_out"
	assert_contents $'PASS[\t ]*/testname\n' "$tmpdir/report_out"
}

# Test that PTEF_RAWNAME outputs testname as-is, unchanged
function rawname {
	assert_ptef_report -r PASS testname >"$tmpdir/report_out"
	assert_contents $'PASS[\t ]*testname\n' "$tmpdir/report_out"
	PTEF_PREFIX=/prefix \
		assert_ptef_report -r PASS testname >"$tmpdir/report_out"
	assert_contents $'PASS[\t ]*testname\n' "$tmpdir/report_out"
}

# Test custom color mapping
function color_map {
	local colorpass=$'\e\[1;32mPASS\e\[0m'
	# color reporting sanity
	TEST_WRAPPER=ttee \
		assert_ptef_report PASS testname >"$tmpdir/report_out"
	assert_contents "$colorpass"$'[\t ]*/testname\n' "$tmpdir/report_out"
	# specifying custom color map resets the default one
	TEST_WRAPPER=ttee \
		assert_ptef_report -c "FAIL FOO" PASS testname >"$tmpdir/report_out"
	assert_contents $'PASS[\t ]*/testname\n' "$tmpdir/report_out"
	# the actual status rewrite
	TEST_WRAPPER=ttee \
		assert_ptef_report -c "ONE FOO" -c "TWO BAR" ONE testname >"$tmpdir/report_out"
	assert_contents $'FOO[\t ]*/testname\n' "$tmpdir/report_out"
	TEST_WRAPPER=ttee \
		assert_ptef_report -c "ONE FOO" -c "TWO BAR" TWO testname >"$tmpdir/report_out"
	assert_contents $'BAR[\t ]*/testname\n' "$tmpdir/report_out"
	# non-colored output should remain unchanged
	assert_ptef_report -c "ONE FOO" -c "TWO BAR" ONE testname >"$tmpdir/report_out"
	assert_contents $'ONE[\t ]*/testname\n' "$tmpdir/report_out"
}


+ locking_stdout
+ locking_results_fd
+ locking_nowait
+ locking_nolock
+ rawname
+ color_map


run_tests "$@"

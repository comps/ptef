#!/bin/bash

. testlib.bash

# Test simple file execution - the runner should find an executable file which
# isn't itself and execute it
function file_exec {
	mkfile > executable
	chmod +x executable
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_grep '^argv0: executable$' exec_log
	assert_grep '^PASS[[:space:]]\+/executable$' "$tmpdir/runner_out"
}

# Test that the runner silently ignores non-executable files while walking
# a directory structure
function file_nonexec {
	mkfile > nonexecutable
	assert_ptef_runner > "$tmpdir/runner_out"
	[ ! -f exec_log ]
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test argv0-named executable in a subdir - the runner should execute it
function dir_exec {
	mkdir subd
	mkfile > subd/ptef-runner
	chmod +x subd/ptef-runner
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_grep '^argv0: ptef-runner$' subd/exec_log
	# exec_log must be only in subd
	[ ! -f exec_log ]
	assert_grep '^PASS[[:space:]]\+/subd$' "$tmpdir/runner_out"
	# runner must not report results for executables inside the subdir
	assert_nogrep '/subd/ptef-runner' "$tmpdir/runner_out"
}

# Test that the runner silently ignores non-executable files in directories
function dir_nonexec {
	mkdir subd
	mkfile > subd/ptef-runner
	assert_ptef_runner > "$tmpdir/runner_out"
	# executable was not run, exec_log must not be present
	[ ! -f subd/exec_log -a ! -f exec_log ]
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test non-argv0-named executable in a subdir - the runner should ignore
# the entire subdir
function dir_otherexec {
	mkdir subd
	mkfile > subd/executable
	chmod +x subd/executable
	assert_ptef_runner > "$tmpdir/runner_out"
	[ ! -f subd/exec_log -a ! -f exec_log ]
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test that a symlink to an executable is followed and treated as if it was
# an executable itself
function symlink_exec {
	local exe="$tmpdir/executable"
	mkfile > "$exe"
	chmod +x "$exe"
	ln -s "$exe" link
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_grep '^argv0: link$' exec_log
	assert_grep '^PASS[[:space:]]\+/link$' "$tmpdir/runner_out"
}

# Test that a symlink to an non-executable file is ignored as if it was
# a non-executable file
function symlink_nonexec {
	local exe="$tmpdir/executable"
	mkfile > "$exe"
	ln -s "$exe" link
	assert_ptef_runner > "$tmpdir/runner_out"
	[ ! -f exec_log ]
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test that a symlink to a directory with an argv0-named executable is executed
# as if it was a normal subdirectory
function symlink_dir {
	local dir="$tmpdir/subd"
	mkdir "$dir"
	mkfile > "$dir/ptef-runner"
	chmod +x "$dir/ptef-runner"
	ln -s "$dir" link
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_grep '^argv0: ptef-runner$' "$dir/exec_log"
	# exec_log must be only in subd
	[ ! -f exec_log ]
	assert_grep '^PASS[[:space:]]\+/link$' "$tmpdir/runner_out"
	# runner must not report results for executables inside the subdir
	assert_nogrep '/link/ptef-runner' "$tmpdir/runner_out"
}

# Test that a broken symlink is ignored like a non-executable file would
function symlink_bad_file {
	ln -s "$tmpdir/nonexistent" executable
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_nogrep '' "$tmpdir/runner_out"
}
function symlink_bad_dir {
	mkdir subd
	ln -s "$tmpdir/nonexistent" subd/ptef-runner
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test that a hidden executable/directory is not executed
function hidden_exec {
	mkfile > .executable
	chmod +x .executable
	assert_ptef_runner > "$tmpdir/runner_out"
	[ ! -f exec_log ]
	assert_nogrep '' "$tmpdir/runner_out"
}
function hidden_dir {
	mkdir .subd
	mkfile > .subd/ptef-runner
	chmod +x .subd/ptef-runner
	assert_ptef_runner > "$tmpdir/runner_out"
	[ ! -f subd/exec_log -a ! -f exec_log ]
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test that an empty CWD doesn't execute anything, doesn't trigger any errors
function empty {
	assert_ptef_runner > "$tmpdir/runner_out"
	assert_nogrep '' "$tmpdir/runner_out"
}

# Test non-default argv0 of the runner, make sure that it still executes only
# an argv0-named executable in a subdir
function custom_argv0 {
	local runner_file=$(command -v ptef-runner)
	[ "${runner_file::1}" = "/" ]   # fails on alias
	ln -s "$runner_file" custom-runner
	mkdir subd
	mkfile > subd/custom-runner
	chmod +x subd/custom-runner
	cp subd/custom-runner subd/executable
	./custom-runner > "$tmpdir/runner_out" 2>"$tmpdir/runner_err"
	assert_nogrep '' "$tmpdir/runner_err"
	assert_grep '^argv0: custom-runner$' subd/exec_log
	assert_nogrep '^argv0: executable$' subd/exec_log
	assert_grep '^PASS[[:space:]]\+/subd$' "$tmpdir/runner_out"
}

# Test that executables are run in an alphanumerical order
function mkalphafile {
	cat <<-EOF
	#!/bin/bash
	echo -n "$1," >> exec_log
	EOF
}
function alpha_order {
	local i=
	# create in random order, in case the filesystem has sequential dir log
	for i in a 1 0 00 11 01 B b 11 2 A; do
		mkalphafile "$i" > "$i"
		chmod +x "$i"
	done
	assert_ptef_runner > "$tmpdir/runner_out"
	echo >> exec_log
	assert_grep '^0,00,01,1,11,2,A,B,a,b,$' exec_log
}
